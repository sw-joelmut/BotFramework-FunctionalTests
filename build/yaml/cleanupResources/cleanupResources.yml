#
# Deletes resources from Deploy & Shared Pipelines for the Skills Functional Tests.
#

name: $(Build.BuildId)
trigger: none
pr: none

variables:
  ## Azure Resources (Define these variables in Azure)
  # AzureSubscription: Service Connection Name to Manage Azure resources.
  # DeployResourceGroup: (optional) Name of the Resource Group containing the bots.
  # ResourceSuffix: (optional) Suffix to add to the resources' name to avoid collitions.
  # SharedResourceGroup: (optional) Name of the Resource Group containing the shared resources.

  ## Internal variables
  InternalAppInsightsName: "bffnappinsights$($env:ResourceSuffix)"
  InternalAppServicePlanDotNetName: "bffnbotsappservicedotnet$($env:ResourceSuffix)"
  InternalAppServicePlanJSName: "bffnbotsappservicejs$($env:ResourceSuffix)"
  InternalAppServicePlanPythonName: "bffnbotsappservicepython$($env:ResourceSuffix)"
  InternalBotResourceGroupName: $[coalesce(variables['DeployResourceGroup'], 'bffnbots')]
  InternalCosmosDBName: "bffnbotstatedb$($env:ResourceSuffix)"
  InternalKeyVaultName: "bffnbotkeyvault$($env:ResourceSuffix)"
  InternalSharedResourceGroupName: $[coalesce(variables['SharedResourceGroup'], 'bffnshared')]

pool:
  vmImage: "windows-2019"

stages:
- stage: "Delete_DotNet_Resource_Group"
  displayName: "Delete DotNet's Resource Group"
  dependsOn: []
  jobs:
    - job: "Delete"
      displayName: "Delete steps"
      steps:
        - template: ../common/deleteResourceGroup.yml
          parameters:
            name: "$(InternalBotResourceGroupName)-DotNet"

- stage: "Delete_JS_Resource_Group"
  displayName: "Delete JS's Resource Group"
  dependsOn: []
  jobs:
    - job: "Delete"
      displayName: "Delete steps"
      steps:
        - template: ../common/deleteResourceGroup.yml
          parameters:
            name: "$(InternalBotResourceGroupName)-JS"

- stage: "Delete_Python_Resource_Group"
  displayName: "Delete Python's Resource Group"
  dependsOn: []
  jobs:
    - job: "Delete"
      displayName: "Delete steps"
      steps:
        - template: ../common/deleteResourceGroup.yml
          parameters:
            name: "$(InternalBotResourceGroupName)-Python"

- stage: "Delete_App_Service_Plan_DotNet"
  displayName: "Delete App Service Plan (DotNet)"
  dependsOn: 
    - Delete_DotNet_Resource_Group
  jobs:
    - job: "Delete"
      displayName: "Delete steps"
      steps:
        - task: AzureCLI@2
          displayName: "Delete App Service Plan (DotNet)"
          inputs:
            azureSubscription: $(AzureSubscription)
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              Write-Host "Looking for $(InternalAppServicePlanDotNetName)..."
              $exists = az appservice plan show --name "$(InternalAppServicePlanDotNetName)" --resource-group "$(InternalSharedResourceGroupName)"
              if ($exists) {
                Write-Host "Deleting $(InternalAppServicePlanDotNetName)..."
                az appservice plan delete --name "$(InternalAppServicePlanDotNetName)" --resource-group "$(InternalSharedResourceGroupName)" --yes
              } else {
                Write-Host "No pre-existing $(InternalAppServicePlanDotNetName) resource found."
              }

- stage: "Delete_App_Service_Plan_JS"
  displayName: "Delete App Service Plan (JS)"
  dependsOn: 
    - Delete_JS_Resource_Group
  jobs:
    - job: "Delete"
      displayName: "Delete steps"
      steps:
        - task: AzureCLI@2
          displayName: "Delete App Service Plan (JS)"
          inputs:
            azureSubscription: $(AzureSubscription)
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              Write-Host "Looking for $(InternalAppServicePlanJSName)..."
              $exists = az appservice plan show --name "$(InternalAppServicePlanJSName)" --resource-group "$(InternalSharedResourceGroupName)"
              if ($exists) {
                Write-Host "Deleting $(InternalAppServicePlanJSName)..."
                az appservice plan delete --name "$(InternalAppServicePlanJSName)" --resource-group "$(InternalSharedResourceGroupName)" --yes
              } else {
                Write-Host "No pre-existing $(InternalAppServicePlanJSName) resource found."
              }

- stage: "Delete_App_Service_Plan_Python"
  displayName: "Delete App Service Plan (Python)"
  dependsOn:
    - Delete_Python_Resource_Group
  jobs:
    - job: "Delete"
      displayName: "Delete steps"
      steps:
        - task: AzureCLI@2
          displayName: "Delete App Service Plan (Python)"
          inputs:
            azureSubscription: $(AzureSubscription)
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              Write-Host "Looking for $(InternalAppServicePlanPythonName)..."
              $exists = az appservice plan show --name "$(InternalAppServicePlanPythonName)" --resource-group "$(InternalSharedResourceGroupName)-linux"
              if ($exists) {
                Write-Host "Deleting $(InternalAppServicePlanPythonName)..."
                az appservice plan delete --name "$(InternalAppServicePlanPythonName)" --resource-group "$(InternalSharedResourceGroupName)-linux" --yes
              } else {
                Write-Host "No pre-existing $(InternalAppServicePlanPythonName) resource found."
              }

- stage: "Delete_App_Insights"
  displayName: "Delete App Insights"
  dependsOn: []
  jobs:
    - job: "Delete"
      displayName: "Delete steps"
      steps:
        - task: AzureCLI@2
          displayName: "Delete App Insights"
          inputs:
            azureSubscription: $(AzureSubscription)
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              az config set extension.use_dynamic_install=yes_without_prompt
              az feature register --name AIWorkspacePreview --namespace microsoft.insights
              Write-Host "Looking for $(InternalAppInsightsName)..."
              if ((az group exists -n "$(InternalSharedResourceGroupName)") -eq "true") {
                $exists = az monitor app-insights component show --app "$(InternalAppInsightsName)" --resource-group "$(InternalSharedResourceGroupName)"
                if ($exists) {
                  Write-Host "Deleting $(InternalAppInsightsName)..."
                  az monitor app-insights component delete --app "$(InternalAppInsightsName)" --resource-group "$(InternalSharedResourceGroupName)"
                } else {
                  Write-Host "No pre-existing $(InternalAppInsightsName) resource found."
                }
              } else {
                Write-Host "No pre-existing $(InternalSharedResourceGroupName) group found."
              }

- stage: "Delete_CosmosDB"
  displayName: "Delete CosmosDB"
  dependsOn: []
  jobs:
    - job: "Delete"
      displayName: "Delete steps"
      steps:
        - task: AzureCLI@2
          displayName: "Delete CosmosDB"
          inputs:
            azureSubscription: $(AzureSubscription)
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              Write-Host "Looking for $(InternalCosmosDBName)..."
              $exists = az cosmosdb check-name-exists --name "$(InternalCosmosDBName)"
              if ($exists -eq $true) {
                Write-Host "Deleting $(InternalCosmosDBName)..."
                az cosmosdb delete --name "$(InternalCosmosDBName)" --resource-group "$(InternalSharedResourceGroupName)" --yes
              } else {
                Write-Host "No pre-existing $(InternalCosmosDBName) resource found."
              }

- stage: "Delete_App_Registrations"
  displayName: "Delete App Registrations"
  dependsOn: []
  jobs:
    - job: "Delete"
      displayName: "Delete steps"
      steps:
        - template: deleteAppRegistrations.yml
          parameters:
            azureSubscription: "$(AzureSubscription)"
            keyVault: "$(InternalKeyVaultName)"
            resourceGroup: "$(InternalSharedResourceGroupName)"

- stage: "Delete_Key_Vault"
  displayName: "Delete Key Vault"
  dependsOn: 
    - Delete_App_Registrations
  jobs:
    - job: "Delete"
      displayName: "Delete steps"
      steps:
        - task: AzureCLI@2
          displayName: "Delete Key Vault"
          inputs:
            azureSubscription: $(AzureSubscription)
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              Write-Host "Looking for $(InternalKeyVaultName)..."
              $exists = az keyvault list --resource-group "$(InternalSharedResourceGroupName)" --query "[?name == '$(InternalKeyVaultName)']" | ConvertFrom-Json
              if ($exists) {
                Write-Host "Deleting $(InternalKeyVaultName)..."
                az keyvault delete --name "$(InternalKeyVaultName)" --resource-group "$(InternalSharedResourceGroupName)"
                az keyvault purge --name "$(InternalKeyVaultName)"
              } else {
                Write-Host "No pre-existing $(InternalKeyVaultName) resource found."
              }

- stage: "Delete_Resource_Group_Windows"
  displayName: "Delete Resource Group (Windows)"
  dependsOn: 
    - Delete_DotNet_Resource_Group
    - Delete_JS_Resource_Group
    - Delete_App_Service_Plan_DotNet
    - Delete_App_Service_Plan_JS
    - Delete_App_Insights
    - Delete_CosmosDB
    - Delete_App_Registrations
    - Delete_Key_Vault
  jobs:
    - job: "Delete"
      displayName: "Delete steps"
      steps:
        - template: ../common/deleteResourceGroup.yml
          parameters:
            name: "$(InternalSharedResourceGroupName)"

- stage: "Delete_Resource_Group_Linux"
  displayName: "Delete Resource Group (Linux)"
  dependsOn: 
    - Delete_Python_Resource_Group
    - Delete_App_Service_Plan_Python
  jobs:
    - job: "Delete"
      displayName: "Delete Resource Group (Linux)"
      steps:
        - template: ../common/deleteResourceGroup.yml
          parameters:
            name: "$(InternalSharedResourceGroupName)-linux"
