parameters:
  appInsight: ""
  appServicePlan: ""
  appServicePlanRG: ""
  azureSubscription: ""
  botPricingTier: ""
  bots: []
  buildPath: "build-composer"
  keyVault: ""
  resourceGroup: ""
  resourceSuffix: ""

stages:
- ${{ each bot in parameters.bots }}:
  - stage: "Deploy_${{ bot.name }}"
    ${{ if eq(bot.displayName, '') }}:
      displayName: "${{ bot.name }}"
    ${{ if ne(bot.displayName, '') }}:
      displayName: "${{ bot.displayName }}"
    dependsOn: "${{ bot.dependsOn }}"
    jobs:
      - job: "Deploy"
        displayName: "Deploy steps"
        steps:
          # Delete Bot Resources
          - template: ../common/deleteResources.yml
            parameters:
              azureSubscription: "${{ parameters.azureSubscription }}"
              resourceGroup: "${{ parameters.resourceGroup }}"
              resourceName: "${{ bot.name }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"

          # Gets Bot App Registration credentials from KeyVault or Pipeline Variables
          - template: ../common/getAppRegistration.yml
            parameters:
              appId: ${{ bot.appId }}
              appSecret: ${{ bot.appSecret }}
              azureSubscription: "${{ parameters.azureSubscription }}"
              botName: "${{ bot.name }}"
              keyVault: "${{ parameters.keyVault }}"

          # Use Net Core version
          - ${{ if ne(bot.project.netCoreVersion, '') }}:
            - task: UseDotNet@2
              displayName: "Use NetCore v${{ bot.project.netCoreVersion }}"
              inputs:
                version: "${{ bot.project.netCoreVersion }}"

          # Evaluate dependencies source and version
          - template: evaluateDependenciesVariables.yml
            parameters:
              botType: "${{ bot.type }}"
              registry: "${{ bot.dependenciesRegistry }}"
              version: "${{ bot.dependenciesVersion }}"

          # Install dependencies in Microsoft.BotFramework.Composer.WebApp
          - template: installDependencies.yml
            parameters:
              project: 
                directory: "${{ bot.project.directory }}/runtime/azurewebapp/"
                name: "Microsoft.BotFramework.Composer.WebApp.csproj"
              source: "$(DependenciesSource)"
              version: "$(DependenciesVersionNumber)"
              packages:
                Microsoft.Bot.Builder
                Microsoft.Bot.Builder.AI.Luis
                Microsoft.Bot.Builder.AI.QnA
                Microsoft.Bot.Builder.ApplicationInsights
                Microsoft.Bot.Builder.Azure
                Microsoft.Bot.Builder.Dialogs.Declarative
                Microsoft.Bot.Builder.Dialogs.Adaptive
                Microsoft.Bot.Builder.Dialogs.Debugging
                Microsoft.Bot.Builder.Integration.ApplicationInsights.Core
                Microsoft.Bot.Builder.Integration.AspNet.Core
                Microsoft.Bot.Builder.Dialogs
                Microsoft.Bot.Connector

          # Install dependencies in Microsoft.BotFramework.Composer.Functions
          - template: installDependencies.yml
            parameters:
              project: 
                directory: "${{ bot.project.directory }}/runtime/azurefunctions/"
                name: "Microsoft.BotFramework.Composer.Functions.csproj"
              source: "$(DependenciesSource)"
              version: "$(DependenciesVersionNumber)"
              packages:
                Microsoft.Bot.Builder
                Microsoft.Bot.Builder.AI.Luis
                Microsoft.Bot.Builder.AI.QnA
                Microsoft.Bot.Builder.ApplicationInsights
                Microsoft.Bot.Builder.Azure
                Microsoft.Bot.Builder.Dialogs.Adaptive
                Microsoft.Bot.Builder.Dialogs.Debugging
                Microsoft.Bot.Builder.Dialogs.Declarative
                Microsoft.Bot.Builder.Integration.ApplicationInsights.Core
                Microsoft.Bot.Builder.Integration.AspNet.Core
                Microsoft.Bot.Builder.Dialogs
                Microsoft.Bot.Connector

          # Install dependencies in Microsoft.BotFramework.Composer.CustomAction
          - template: installDependencies.yml
            parameters:
              project:
                directory: "${{ bot.project.directory }}/runtime/customaction/"
                name: "Microsoft.BotFramework.Composer.CustomAction.csproj"
              source: "$(DependenciesSource)"
              version: "$(DependenciesVersionNumber)"
              packages:
                Microsoft.Bot.Builder.Dialogs.Adaptive

          # Install dependencies in Microsoft.BotFramework.Composer.Core
          - template: installDependencies.yml
            parameters:
              project: 
                directory: "${{ bot.project.directory }}/runtime/core/"
                name: "Microsoft.BotFramework.Composer.Core.csproj"
              source: "$(DependenciesSource)"
              version: "$(DependenciesVersionNumber)"
              packages:
                Microsoft.Bot.Builder
                Microsoft.Bot.Builder.AI.Luis
                Microsoft.Bot.Builder.AI.QnA
                Microsoft.Bot.Builder.ApplicationInsights
                Microsoft.Bot.Builder.Azure
                Microsoft.Bot.Builder.Azure.Blobs
                Microsoft.Bot.Builder.Dialogs.Adaptive
                Microsoft.Bot.Builder.Dialogs.Debugging
                Microsoft.Bot.Builder.Dialogs.Declarative
                Microsoft.Bot.Builder.Integration.ApplicationInsights.Core
                Microsoft.Bot.Builder.Integration.AspNet.Core
                Microsoft.Bot.Builder.Dialogs
                Microsoft.Bot.Connector

          # Prepare DotNet deploy
          - task: AzureCLI@1
            displayName: "Prepare Deploy"
            inputs:
              azureSubscription: "${{ parameters.azureSubscription }}"
              scriptLocation: inlineScript
              inlineScript: "az bot prepare-deploy --lang Csharp --code-dir ${{ bot.project.directory }}/runtime/azurewebapp --proj-file-path Microsoft.BotFramework.Composer.WebApp.csproj --output json"

          # Build Bot
          - task: DotNetCoreCLI@2
            displayName: "Build"
            inputs:
              command: publish
              publishWebProjects: false
              projects: "${{ bot.project.directory }}/runtime/azurewebapp/Microsoft.BotFramework.Composer.WebApp.csproj"
              arguments: "-c release -o ${{ parameters.buildPath }}"
              modifyOutputPath: false
              zipAfterPublish: false

          # Get BotBuilder package version
          - task: PowerShell@2
            displayName: 'Get BotBuilder Version'
            inputs:
              targetType: inline
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ bot.project.directory }}'
              failOnStderr: true
              script: |
                [XML]$data = Get-Content "./runtime/azurewebapp/Microsoft.BotFramework.Composer.WebApp.csproj";
                $package = $data.Project.ItemGroup.PackageReference | Where-Object { $_.Include -eq "Microsoft.Bot.Builder.Integration.AspNet.Core" };
                Write-Host "##vso[task.setvariable variable=BotBuilderVersionNumber]$($package.version)";

          # Tag BotBuilder package version
          - template: ../common/tagBotBuilderVersion.yml
            parameters:
              ${{ if eq(bot.displayName, '') }}:
                botName: '${{ bot.name }}'
              ${{ if ne(bot.displayName, '') }}:
                botName: '${{ bot.displayName }}'
              version: "$(BotBuilderVersionNumber)"

          # Arrange composer folders & files
          - task: PowerShell@2
            displayName: 'Prepare Composer'
            inputs:
              targetType: inline
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ bot.project.directory }}'
              failOnStderr: true
              script: |
                $composerDialogs = "$(System.DefaultWorkingDirectory)/${{ parameters.buildPath }}/ComposerDialogs"
                Remove-Item $composerDialogs -Recurse -ErrorAction Ignore

                Copy-Item -Path (Get-Item -Path ./* -Exclude ("runtime", "scripts", "*.ps1", "readme.md", "*.botproj", ".gitignore")).FullName -Destination $composerDialogs -Recurse -Force -Container

          # Zip bot
          - task: ArchiveFiles@2
            displayName: 'Zip bot'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/${{ parameters.buildPath }}'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/${{ parameters.buildPath }}/${{ bot.name }}.zip'
              replaceExistingArchive: true
              verbose: true

          # Upload zip to artifacts in case we want to debug it
          - task: PublishBuildArtifacts@1
            displayName: 'Publish zip package'
            inputs:
              pathToPublish: '$(System.DefaultWorkingDirectory)/${{ parameters.buildPath }}/${{ bot.name }}.zip'
              artifactName: dotnet-$(Build.BuildId)

          # Create App Service and Bot Channel Registration
          - template: ../common/createAppService.yml
            parameters:
              appId: $(AppId)
              appInsight: "${{ parameters.appInsight }}"
              appSecret:  $(AppSecret)
              appServicePlan: "${{ parameters.appServicePlan }}"
              appServicePlanRG: "${{ parameters.appServicePlanRG }}"
              azureSubscription: "${{ parameters.azureSubscription }}"
              botGroup: "${{ parameters.resourceGroup }}"
              botName: "${{ bot.name }}"
              botPricingTier: "${{ parameters.botPricingTier }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"
              templateFile: "build/templates/template-bot-resources.json"

          # Deploy bot
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : ${{ bot.name }}-$(Build.BuildId)'
            inputs:
              azureSubscription: "${{ parameters.azureSubscription }}"
              appName: '${{ bot.name }}${{ parameters.resourceSuffix }}-$(Build.BuildId)'
              resourceGroupName: '${{ parameters.resourceGroup }}'
              package: '$(System.DefaultWorkingDirectory)/${{ parameters.buildPath }}/${{ bot.name }}.zip'
              deploymentMethod: runFromPackage

          # Create DirectLine Channel Hosts
          - ${{ if eq(bot.type, 'Host') }}:
            - template: ../common/createDirectLine.yml
              parameters:
                azureSubscription: "${{ parameters.azureSubscription }}"
                botGroup: "${{ parameters.resourceGroup }}"
                botName: "${{ bot.name }}"
                resourceSuffix: "${{ parameters.resourceSuffix }}"
